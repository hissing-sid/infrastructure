AWSTemplateFormatVersion: '2010-09-09'

Description: Schedule automatic deletion of CloudFormation stacks. 

# Based on: https://aws.amazon.com/blogs/infrastructure-and-automation/scheduling-automatic-deletion-of-aws-cloudformation-stacks/
# Permissions did for work out of the box so have modified DeleteCFNLambdaExecutionRole 

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Input configuration
        Parameters:
          - StackName
          - TTL
    ParameterLabels:
      StackName:
        default: Stack name that will be deleted.
      TTL:
        default: Time-to-live in minutes for the stack.

Parameters:
  StackName:
    Type: String
    Description: Stack name that will be deleted.
  TTL:
    Type: Number
    Description: Time-to-live in minutes for the stack.
    Default: 2
    MinValue: 2

Resources:
#------------------------------------------------------------------------------
# Lambda Function to delete the stack
# Note the role it depends upon and the required permissions
#------------------------------------------------------------------------------

  DeleteCFNLambda:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - DeleteCFNLambdaExecutionRole
    Properties:
      FunctionName: !Sub "${StackName}-DeleteCFNLambda"
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          
          stack_name = os.environ['stackName']
          
          def delete_cfn(stack_name):
              try:
                  cfn = boto3.resource('cloudformation')
                  stack = cfn.Stack(stack_name)
                  stack.delete()
                  return "SUCCESS"
              except:
                  return "ERROR" 
          
          def handler(event, context):
              print("Received event:")
              print(json.dumps(event))
              return delete_cfn(stack_name)
      Environment:
        Variables:
          stackName: !Ref 'StackName'
      Handler: "index.handler"
      Runtime: "python3.9"
      Timeout: "5"
      Role: !GetAtt DeleteCFNLambdaExecutionRole.Arn


  DeleteCFNLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${StackName}-DeleteCFNLambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: ["lambda.amazonaws.com"]
          Action: "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: "lambda_policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          -  
            Sid: CloudWatchPermissions
            Effect: "Allow"
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
          -  
            Sid: CloudFormationPermissions
            Effect: "Allow"
            Action:
              - cloudformation:DeleteStack
            Resource: 
              - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${StackName}/*"
          # The following were missing from the example
          -  
            Sid: IAMPermissions
            Effect: "Allow"
            Action:
              - iam:DeleteRolePolicy
              - iam:DeleteRole
            Resource: 
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/${StackName}-DeleteCFNLambda"
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/${StackName}-DeleteCFNLambdaExecutionRole"
              - !Sub "arn:aws:iam::${AWS::AccountId}:role/${StackName}-GenerateCronExpLambdaRole"
          - 
            Sid: LamdaPermissions
            Effect: "Allow"
            Action:
              - lambda:DeleteFunction
              - lambda:InvokeFunction
              - lambda:RemovePermission
            Resource: 
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-GenerateCronExpLambda"
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-DeleteCFNLambda"
          -  
            Sid: EventsPermissions
            Effect: "Allow"
            Action: 
              - events:RemoveTargets
              - events:DeleteRule
            Resource: 
             - !Sub  "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${StackName}-DeleteStackEventRule"


#------------------------------------------------------------------------------
# Generate cron expression and then setup Lambda to trigger delete 
# when the event fires
#------------------------------------------------------------------------------
  GenerateCronExpression:
    Type: "Custom::GenerateCronExpression"
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt GenerateCronExpLambda.Arn
      ttl: !Ref 'TTL'

  GenerateCronExpLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${StackName}-GenerateCronExpLambdaRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: ["lambda.amazonaws.com"]
          Action: "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: "lambda_policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"

  GenerateCronExpLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${StackName}-GenerateCronExpLambda"
      Code:
        ZipFile: |
          from datetime import datetime, timedelta
          import os
          import logging
          import json
          import cfnresponse
          
          def deletion_time(ttl):
              delete_at_time = datetime.now() + timedelta(minutes=int(ttl))
              hh = delete_at_time.hour
              mm = delete_at_time.minute
              yyyy = delete_at_time.year
              month = delete_at_time.month
              dd = delete_at_time.day
              # minutes hours day month day-of-week year
              cron_exp = "cron({} {} {} {} ? {})".format(mm, hh, dd, month, yyyy)
              return cron_exp
          
          def handler(event, context):
            print('Received event: %s' % json.dumps(event))
            status = cfnresponse.SUCCESS
            try:
                if event['RequestType'] == 'Delete':
                    cfnresponse.send(event, context, status, {})
                else:
                    ttl = event['ResourceProperties']['ttl']
                    responseData = {}
                    responseData['cron_exp'] = deletion_time(ttl)
                    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            except Exception as e:
                logging.error('Exception: %s' % e, exc_info=True)
                status = cfnresponse.FAILED
                cfnresponse.send(event, context, status, {}, None)
      Handler: "index.handler"
      Runtime: "python3.6"
      Timeout: "5"
      Role: !GetAtt GenerateCronExpLambdaRole.Arn

  DeleteStackEventRule:
    DependsOn:
      - DeleteCFNLambda
      - GenerateCronExpression
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub "${StackName}-DeleteStackEventRule"
      Description: Delete stack event
      ScheduleExpression: !GetAtt GenerateCronExpression.cron_exp
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt DeleteCFNLambda.Arn
          Id: 'DeleteCFNLambda' 

  PermissionForDeleteCFNLambda: 
    Type: "AWS::Lambda::Permission"
    Properties: 
      FunctionName: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackName}-DeleteCFNLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt DeleteStackEventRule.Arn
